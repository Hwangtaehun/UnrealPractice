델리게이트는 넓은 의미로 본다면 특정 객체가 해야 할 로직을 다른 객체가 대신 처리할 수 있도록 만드는 보편적인 설계의 개념을 의미한다.

람다식
람다식은 함수를 헤더에 선언할 필요가 없으므로 간단한 로직을 간편하게 처리할 수 있다는 장점이 있다.
람다식은 세 가지 영역으로 구분된다.
람다 소개자: []로 표시되며 람다 구문이 참조할 환경을 지정하낟. 람다 함수가 참조할 환경을 캡처(Capture)라고도 하는데, 
우리 코드의 경우 람다 구문에서 인스턴스의 관련 맴버 함수와 변수를 사용하기 때문에 캡처 환경을 this로 지정했다.

파라미터 리스트: 람다 함수가 사용할 파라미터를 지정하는 구문이다.
우리가 사용할 델리게이트는 함수 인자가 없으므로 빈 괄호를 사용한다.

후행 반환 타입: '->'기호를 사용한 후 람다 함수가 반환할 타입을 지정한다.
우리가 사용할 델리게이트는 반환 값이 없으므로 void를 사용한다.

람다 함수 구문: {}로 캡처 환경을 사용한 람다 함수의 로직을 넣어준다.
앞서 람다 소개자의 캡처를 this로 지정했기 때문에 맴버 변수와 함수에 자유롭게 접근할 수 있다.

다이내믹 델리게이트는 UFUNCTION 함수를 사용해야 하므로 아쉽게도 C++람다식으로 표현한 함수는 바인딩할 수 없다.